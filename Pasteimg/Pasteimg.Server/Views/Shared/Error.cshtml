@model ErrorViewModel
@{
    ViewData["Title"] = "Error";
}

<h1 class="text-danger">Error.</h1>
<h2 class="text-danger">An error occurred while processing your request.</h2>

@if (Model.Error is not null)
{
    <h4 class="text-danger">
        @Model.Error.Message
    </h4>
    <p>
        <strong>Error type:</strong> <code>@(@Model.Error.GetType().Name)</code>
    </p>
    <p>
        <strong>Entity type:</strong> <code>@(@Model.Error.EntityType?.Name)</code>
    </p>
    <p>
        <strong>Requested Id:</strong><code>@(@Model.Error.Id)</code>
    </p>
    if(Model.Error is InvalidEntityException invalidEntity)
    {
        <p>
            <strong>Property name:</strong><code>@(invalidEntity.PropertyName)</code>
        </p>
        <p>
            <strong>Property Value:</strong><code>@(invalidEntity.Value)</code>
        </p>
    }
    else if(Model.Error is WrongPasswordException wrongPass)
    {
                 <p>
                    <strong>Remaining attempt:</strong><code>@(wrongPass.RemainingAttempt)</code>
                </p>
    }
   

}

<h3>Development Mode</h3>
<p>
    Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
</p>
<p>
    <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
    It can result in displaying sensitive information from exceptions to end users.
    For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
    and restarting the app.
</p>
